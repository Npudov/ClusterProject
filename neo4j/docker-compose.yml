version: '3.8'

# Custom top-level network
networks:
  neo4j-internal:

services:

  server1:
    # Docker image to be used
    image: neo4j:3.5-enterprise

    # Hostname
    hostname: server1

    # Service-level network, which specifies the networks, from the list of the top-level networks (in this case only neo4j-internal), that the server will connect to.
    # Adds a network alias (used in neo4j.conf when configuring the discovery members)
    networks:
      neo4j-internal:
        aliases:
          - neo4j-network

    # The ports that will be accessible from outside the container - HTTP (7474) and Bolt (7687).
    ports:
      - "7474:7474" #порт HTTP для neo4j
      - "7687:7687" #порт, необходимый для связи с узлом кластера по протоколу Bolt

    # Uncomment the volumes to be mounted to make them accessible from outside the container.
    volumes:
      - ./neo4j.conf:/conf/neo4j.conf # This is the main configuration file. Конфигурационный файл
      - ./data/server1:/data #папка для данных
      - ./logs/server1:/logs #папка для логов
      - ./conf/server1:/conf #папка для хранения конфигурационного файла
      - ./import/server1:/import #папка для хранения файлов для импорта в базу
      #- ./metrics/server1:/metrics
      #- ./licenses/server1:/licenses
      #- ./ssl/server1:/ssl

    # Passes the following environment variables to the container
    environment:
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes #принятие лицензионного соглашения
      - NEO4J_AUTH=neo4j/changeme #задаем данные для аутентификации: пользователь, пароль
      - EXTENDED_CONF=yes #задаем что у нас расширенная конфигурация (расширенные настройки узла кластера)
      - NEO4J_EDITION=docker_compose #конфигурация узла адаптирована под docker-compose
      - NEO4J_initial_server_mode__constraint=PRIMARY #режим запуска узла в режиме Master

    # Simple check testing whether the port 7474 is opened.
    # If so, the instance running inside the container is considered as "healthy".
    # This status can be checked using the "docker ps" command.
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider localhost:7474 || exit 1"] #команда, выполняющаяся в контейнере и проверяющая доступность узла кластера. Режим spider нужен, чтобы wget не загружал файлы
    deploy:
      resources:
        limits: # лимит выделяемых ресурсов для узла кластера
          memory: 1.5G
          cpus: "1.0"
        reservations: # количество ресурсов, которое минимум должно быть выделено узлу кластера
          memory: 512M
          cpus: "0.5"
    # Set up the user
    #user: ${USER_ID}:${GROUP_ID}

  server2:
    image: neo4j:3.5-enterprise
    hostname: server2
    networks:
      neo4j-internal:
        aliases:
          - neo4j-network
    ports:
      - "7475:7474" #порт HTTP для neo4j
      - "7688:7687" #порт, необходимый для связи с узлом кластера по протоколу Bolt
    volumes:
      - ./neo4j.conf:/conf/neo4j.conf #конфигурационный файл
      - ./data/server2:/data #папка для данных
      - ./logs/server2:/logs #папка для логов
      - ./conf/server2:/conf #папка для хранения конфигурационного файла
      - ./import/server2:/import #папка для хранения файлов для импорта в базу
      #- ./metrics/server2:/metrics
      #- ./licenses/server2:/licenses
      #- ./ssl/server2:/ssl
    environment:
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes #принятие лицензионного соглашения
      - NEO4J_AUTH=neo4j/changeme #задаем данные для аутентификации: пользователь, пароль
      - EXTENDED_CONF=yes #задаем что у нас расширенная конфигурация (расширенные настройки узла кластера)
      - NEO4J_EDITION=docker_compose #конфигурация узла адаптирована под docker-compose
      - NEO4J_initial_server_mode__constraint=SECONDARY #режим запуска узла кластера в Slave
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider localhost:7474 || exit 1"] #команда, выполняющаяся в контейнере и проверяющая доступность узла кластера. Режим spider нужен, чтобы wget не загружал файлы
    deploy:
      resources:
        limits: # лимит выделяемых ресурсов для узла кластера
          memory: 1.5G
          cpus: "1.0"
        reservations: # количество ресурсов, которое минимум должно быть выделено узлу кластера
          memory: 512M
          cpus: "0.5"
    #user: ${USER_ID}:${GROUP_ID}

  server3:
    image: neo4j:3.5-enterprise
    hostname: server3
    networks:
      neo4j-internal:
        aliases:
          - neo4j-network
    ports:
      - "7476:7474" #порт HTTP для neo4j
      - "7689:7687" #порт, необходимый для связи с узлом кластера по протоколу Bolt
    volumes:
      - ./neo4j.conf:/conf/neo4j.conf #конфигурационный файл
      - ./data/server3:/data #папка для данных
      - ./logs/server3:/logs #папка для логов
      - ./conf/server3:/conf #папка для хранения конфигурационного файла
      - ./import/server3:/import #папка для хранения файлов для импорта в базу
      #- ./metrics/server3:/metrics
      #- ./licenses/server3:/licenses
      #- ./ssl/server3:/ssl
    environment:
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes #принятие лицензионного соглашения
      - NEO4J_AUTH=neo4j/changeme #задаем данные для аутентификации: пользователь, пароль
      - EXTENDED_CONF=yes #задаем что у нас расширенная конфигурация (расширенные настройки узла кластера)
      - NEO4J_EDITION=docker_compose #конфигурация узла адаптирована под docker-compose
      - NEO4J_initial_server_mode__constraint=SECONDARY #режим запуска узла кластера в Slave
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider localhost:7474 || exit 1"] #команда, выполняющаяся в контейнере и проверяющая доступность узла кластера. Режим spider нужен, чтобы wget не загружал файлы
    deploy:
      resources:
        limits: # лимит выделяемых ресурсов для узла кластера
          memory: 1.5G
          cpus: "1.0"
        reservations: # количество ресурсов, которое минимум должно быть выделено узлу кластера
          memory: 512M
          cpus: "0.5"
    #user: ${USER_ID}:${GROUP_ID}

  server4:
    image: neo4j:3.5-enterprise
    hostname: server4
    networks:
      neo4j-internal:
        aliases:
          - neo4j-network
    ports:
      - "7477:7474" #порт HTTP для neo4j
      - "7690:7687" #порт, необходимый для связи с узлом кластера по протоколу Bolt
    volumes:
      - ./neo4j.conf:/conf/neo4j.conf #конфигурационный файл
      - ./data/server4:/data #папка для данных
      - ./logs/server4:/logs #папка для логов
      - ./conf/server4:/conf #папка для хранения конфигурационного файла
      - ./import/server4:/import #папка для хранения файлов для импорта в базу
      #- ./metrics/server4:/metrics
      #- ./licenses/server4:/licenses
      #- ./ssl/server4:/ssl
    environment:
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes #принятие лицензионного соглашения
      - NEO4J_AUTH=neo4j/changeme #задаем данные для аутентификации: пользователь, пароль
      - EXTENDED_CONF=yes #задаем что у нас расширенная конфигурация (расширенные настройки узла кластера)
      - NEO4J_EDITION=docker_compose #конфигурация узла адаптирована под docker-compose
      - NEO4J_initial_server_mode__constraint=SECONDARY #режим запуска узла кластера в Slave
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider localhost:7474 || exit 1"] #команда, выполняющаяся в контейнере и проверяющая доступность узла кластера. Режим spider нужен, чтобы wget не загружал файлы
    deploy:
      resources:
        limits: # лимит выделяемых ресурсов для узла кластера
          memory: 1.5G
          cpus: "1.0"
        reservations: # количество ресурсов, которое минимум должно быть выделено узлу кластера
          memory: 512M
          cpus: "0.5"
    #user: ${USER_ID}:${GROUP_ID}